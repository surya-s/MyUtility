package com.db;

public class Queries {

	public static StringBuilder hookProcedures = new StringBuilder(" SELECT DISTINCT A.MODULE_NAME, A.PROC, A.TYPE,A.PACKAGE_NAME,HOOK_NAME FROM(") 
		.append(" SELECT UPPER(SUBSTR(HOOKNAME,4,3)) MODULE_NAME, UPPER(SUBSTR(HOOKNAME,INSTR(HOOKNAME,'.',1)+1)) PROC,")
		.append(" 'HOOK' AS TYPE,UPPER(SUBSTR(HOOKNAME,0,INSTR(HOOKNAME,'.',1)-1)) as PACKAGE_NAME,upper(HOOKNAME) AS HOOK_NAME FROM MS_APPS_WF_TRAN_HOOK UNION ALL")
		.append(" SELECT UPPER(SUBSTR(PHOOKNAME,4,3)) MODULE_NAME, UPPER(SUBSTR(PHOOKNAME,INSTR(PHOOKNAME,'.',1)+1)) PROC,")
		.append(" 'PHOOK' AS TYPE, UPPER(SUBSTR(PHOOKNAME,0,INSTR(PHOOKNAME,'.',1)-1)) as PACKAGE_NAME,upper(PHOOKNAME) AS HOOK_NAME FROM MS_APPS_WF_TRAN_POSTHOOK) A");

	public static StringBuilder allProcedures = new StringBuilder("SELECT OBJECT_NAME MODULE_NAME, PROCEDURE_NAME PROC, OBJECT_TYPE TYPE,OBJECT_NAME PACKAGE_NAME,OBJECT_NAME||'.'||PROCEDURE_NAME AS HOOK_NAME ")
			.append(" FROM USER_PROCEDURES WHERE PROCEDURE_NAME IS NOT NULL ORDER BY OBJECT_NAME,PROCEDURE_NAME "); 
	
	
	/**
	 * App name as filter for packageSql 
	 */
	public static String packageFilter = " AND A.PACKAGE_NAME IN ("; 
	
	/**
	 * Get package source from 
	 * NAME - Package NAME 
	 */
	public static StringBuilder packageSourceQuery = new StringBuilder("SELECT UPPER(TEXT) AS TEXT FROM USER_SOURCE WHERE TYPE='PACKAGE BODY' AND ")
			.append(" ltrim(text) not like '--%' AND text IS NOT NULL") 
			.append(" AND NAME = ? ORDER BY NAME, LINE ");
	
	/** 
	 * Collects Security and performance configuration of forms
	 * 
	 */
	public static StringBuilder formInfoletDetails = new StringBuilder()
			.append(" SELECT A.PACKAGE_NAME, A.METRIC_ID, A.METRIC_NAME,")  
			.append(" A.USE_NMR_OPTIMIZATION, DECODE(A.PUSH_PROVIDER,100001,'FASTFORM',100002,'ASTRA') AS FORM_ENGINE,")
			.append(" NVL((SELECT 'Y' FROM SI_ASSOCIATED_INFOLETS B WHERE UPPER(A.METRIC_NAME) =")
			.append(" UPPER(B.OBJECT_NAME) AND B.ASSOCIATED_OBJECT_TYPE=1 AND ROWNUM=1),'N') AS ACCESS_CONTROL,")
			.append(" NVL((SELECT 'Y' FROM SI_ASSOCIATED_INFOLETS B WHERE UPPER(A.METRIC_NAME) =")
			.append(" UPPER(B.OBJECT_NAME) AND B.ASSOCIATED_OBJECT_TYPE=2 AND ROWNUM=1),'N') AS WFTS_INFOLET,")
			.append(" NVL((SELECT 'Y' FROM SI_WFTS_MATRIX_T B WHERE upper(B.METRIC_NAME) = upper(A.METRIC_NAME)),'N') AS WFTS_ACTIVITY_BASE,")
			.append(" NVL((SELECT 'Y' FROM SI_ASSOCIATED_INFOLETS B WHERE UPPER(A.METRIC_NAME) =")
			.append(" UPPER(B.OBJECT_NAME) AND B.ASSOCIATED_OBJECT_TYPE=3 AND ROWNUM=1),'N') AS WF_ERROR_INFOLET,")
			.append(" (SELECT COUNT(1) FROM SI_METRIC_COLUMNS C WHERE ")
			.append(" (C.INPUT_METRIC_ID IS NOT NULL AND C.INPUT_METRIC_ID > 0) AND C.METRIC_ID = A.METRIC_ID) INPUT_INFOLETS, ")
			.append(" (SELECT COUNT(1) FROM SI_METRIC_COLUMNS C, SI_METRICS T WHERE  ")
			.append(" (C.INPUT_METRIC_ID IS NOT NULL AND C.INPUT_METRIC_ID > 0)  ")
			.append(" AND C.METRIC_ID = A.METRIC_ID AND T.METRIC_ID = C.INPUT_METRIC_ID AND T.ARCHIVE_FLAG='Y') PI_INPUT_INFOLETS, ")
			.append(" (SELECT COUNT(1) FROM SI_METRIC_COLUMNS C WHERE  ")
			.append(" (C.DEFAULT_METRIC_ID IS NOT NULL AND C.DEFAULT_METRIC_ID > 0) AND C.METRIC_ID = A.METRIC_ID) DEFAULT_INFOLETS, ")
			.append(" (SELECT COUNT(1) FROM SI_METRIC_COLUMNS C, SI_METRICS T WHERE  ")
			.append(" (C.DEFAULT_METRIC_ID IS NOT NULL AND C.DEFAULT_METRIC_ID > 0)  ")
			.append(" AND C.METRIC_ID = A.METRIC_ID AND T.METRIC_ID = C.DEFAULT_METRIC_ID AND T.ARCHIVE_FLAG='Y') PI_DEFAULT_INFOLETS, ")
			.append(" (SELECT COUNT(1) FROM SI_METRIC_COLUMNS C WHERE  ")
			.append(" (C.DISPLAY_METRIC_ID IS NOT NULL AND C.DISPLAY_METRIC_ID > 0) AND C.METRIC_ID = A.METRIC_ID) DISPLAY_INFOLETS, ")
			.append(" (SELECT COUNT(1) FROM SI_METRIC_COLUMNS C, SI_METRICS T WHERE  ")
			.append(" (C.DISPLAY_METRIC_ID IS NOT NULL AND C.DISPLAY_METRIC_ID > 0)  ")
			.append(" AND C.METRIC_ID = A.METRIC_ID AND T.METRIC_ID = C.DISPLAY_METRIC_ID AND T.ARCHIVE_FLAG='Y') PI_DISPLAY_INFOLETS, ")
			.append(" (SELECT LISTAGG(ADT_TYPE ||'-'|| COUNT(ADT_TYPE),',\n') WITHIN GROUP (ORDER BY 1) ")
			.append(" FROM  SI_BUSINESS_ENTITY_TYPES_T T WHERE ")
			.append(" T.ENTITY_TYPE='FORM' AND T.ENTITY_ID=A.METRIC_ID")
			.append(" GROUP BY ADT_TYPE) AS ADT")
			.append(" FROM SI_METRICS A WHERE A.METRIC_TYPE = 10");
	
}
